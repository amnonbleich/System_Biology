install.packages("BoolNet")
install.packages("XML")
install.packages("BoolNet")
middle_start_state_in = c(0,1,0,1,1,1,1,1,1,0,1,1)
start_state_in = c(1,0,1,0,0,0,0,0,0,1,0,0)
intrinsic_feedback <- loadNetwork("intrinsic_feedback.boolnet")
library(BoolNet)
setwd("~/System_Biology/Final/models/")
start_state_00 = c(1,0,0,0,0,0,0,0,0,0,0,0)
start_state_01 = c(1,0,0,0,0,0,0,0,0,1,0,0)
start_state_10 = c(1,0,1,0,0,0,0,0,0,0,0,0)
start_state_11 = c(1,0,1,0,0,0,0,0,0,1,0,0)
source("plot_attractor_path.R")
genes_to_plot = c("BCL2", "Apaf1", "IAP", "Apoptosis") # optional
cols=c("green", "orange", "blue", "red") #optional
source("plot_attractor_path.R")
source("plot_attractor_path.R")
genes_to_plot = c("BCL2", "Apaf1", "IAP", "Apoptosis") # optional
cols=c("green", "orange", "blue", "red") #optional
par(mfrow=c(1,1))
start_state_in = c(1,0,1,0,0,0,0,0,0,1,0,0)
att = getAttractors(intrinsic, method="exhaustive", returnTable=T)
plotAttractors(att, drawLegend=F)
intrinsic <- loadNetwork("intrinsic.boolnet")
par(mfrow=c(1,1))
start_state_in = c(1,0,1,0,0,0,0,0,0,1,0,0)
att = getAttractors(intrinsic, method="exhaustive", returnTable=T)
plotAttractors(att, drawLegend=F)
typeof(intrinsic)
typeof(att)
typeof(att.class)
typeof(att$class)
attr(att)
source("plot_attractor_path.R")
genes_to_plot = c("BCL2", "Apaf1", "IAP", "Apoptosis") # optional
cols=c("green", "orange", "blue", "red") #optional
source("plot_attractor_path.R")
genes_to_plot = c("BCL2", "Apaf1", "IAP", "Apoptosis") # optional
cols=c("green", "orange", "blue", "red") #optional
plot_attractor_path(att, title = "all Attractors w.t.")
source("plot_attractor_path.R")
plot_attractor_path(att, title = "all Attractors w.t.")
source("plot_attractor_path.R")
plot_attractor_path(att, title = "all Attractors w.t.")
start_state_in = c(1,0,1,0,0,0,0,0,0,1,0,0)
plot_attractor_path(att, title = "all Attractors w.t.", startStates = start_state_in)
source("plot_attractor_path.R")
genes_to_plot = c("BCL2", "Apaf1", "IAP", "Apoptosis") # optional
cols=c("green", "orange", "blue", "red") #optional
plot_attractor_path(att, title = "all Attractors w.t.", startStates = start_state_in)
plot_attractor_path(att, title = "all Attractors w.t.", startStates = start_state_in)
source("plot_attractor_path.R")
plot_attractor_path(att, title = "all Attractors w.t.", startStates = start_state_in)
source("plot_attractor_path.R")
plot_attractor_path(att, title = "all Attractors w.t.", startStates = start_state_in)
plot_attractor_path(att, title = "all Attractors w.t.", startStates = start_state_in, genes = genes_to_plot)
source("plot_attractor_path.R")
plot_attractor_path(intrinsic, title = "all Attractors w.t.", startStates = start_state_in, genes = genes_to_plot)
plot_attractor_path(intrinsic, title = "all Attractors w.t.", startStates = start_state_in, genes = genes_to_plot)
middle_start_state_in = c(0,1,0,1,1,1,1,1,1,0,1,1)
intrinsic_feedback <- loadNetwork("intrinsic_feedback.boolnet")
plotSequence(intrinsic, startState = middle_start_state_in ,title = "no_feedback", drawLegend=F)
plot_attractor_path(intrinsic, title = "no_feedback", startStates = middle_start_state_in)#, genes = genes_to_plot)
m1 <- matrix(nrow = 1, ncol=2)
View(m1)
m2 <- matrix(nrwo=1, ncol=2)
m2 <- matrix(nrow=1, ncol=2)
m3 <- cbind(m1, m2)
View(m3)
source("plot_attractor_path.R")
source("plot_attractor_path.R")
plot_attractor_path(intrinsic, title = "no_feedback", startStates = start_state_in, second_round_states = middle_start_state_in)#, genes = genes_to_plot)
typeof(middle_start_state_in)
typeof("")
source("plot_attractor_path.R")
plot_attractor_path(intrinsic, title = "no_feedback", startStates = start_state_in, second_round_states = middle_start_state_in)#, genes = genes_to_plot)
source("plot_attractor_path.R")
plot_attractor_path(intrinsic, title = "no_feedback", startStates = start_state_in, second_round_states = middle_start_state_in)#, genes = genes_to_plot)
m1
m2
m2 <- matrix(nrow=1, ncol=4)
m3 <- cbind(m1,m2)
m2
m2
m1
m2
source("plot_attractor_path.R")
plot_attractor_path(intrinsic, title = "no_feedback", startStates = start_state_in, second_round_states = middle_start_state_in)#, genes = genes_to_plot)
source("plot_attractor_path.R")
plot_attractor_path(intrinsic, title = "no_feedback", startStates = start_state_in, second_round_states = middle_start_state_in)#, genes = genes_to_plot)
source("plot_attractor_path.R")
plot_attractor_path(intrinsic, title = "no_feedback", startStates = start_state_in, second_round_states = middle_start_state_in)#, genes = genes_to_plot)
source("plot_attractor_path.R")
plot_attractor_path(intrinsic, title = "no_feedback", startStates = start_state_in, second_round_states = middle_start_state_in)#, genes = genes_to_plot)
source("plot_attractor_path.R")
plot_attractor_path(intrinsic, title = "no_feedback", startStates = start_state_in, second_round_states = middle_start_state_in)#, genes = genes_to_plot)
genes_to_plot = c("stimulus","BCL2", "Apaf1", "IAP","Casp9", "Apoptosis") # optional
plot_attractor_path(intrinsic, title = "no_feedback", startStates = start_state_in, second_round_states = middle_start_state_in, genes = genes_to_plot)
cols=c("green", "orange", "blue","black", "red", "darkred") #optional
plot_attractor_path(intrinsic, title = "no_feedback", startStates = start_state_in,
second_round_states = middle_start_state_in, genes = genes_to_plot, colors = cols)
source("plot_attractor_path.R")
plot_attractor_path(intrinsic, title = "no_feedback", startStates = start_state_in,
second_round_states = middle_start_state_in, genes = genes_to_plot, colors = cols)
rep(0m1)
rep(0,1)
source("plot_attractor_path.R")
plot_attractor_path(intrinsic, title = "no_feedback", startStates = start_state_in,
second_round_states = middle_start_state_in, genes = genes_to_plot, colors = cols)
source("plot_attractor_path.R")
plot_attractor_path(intrinsic, title = "no_feedback", startStates = start_state_in,
second_round_states = middle_start_state_in, genes = genes_to_plot, colors = cols)
source("plot_attractor_path.R")
plot_attractor_path(intrinsic, title = "no_feedback", startStates = start_state_in,
second_round_states = middle_start_state_in, genes = genes_to_plot, colors = cols)
source("plot_attractor_path.R")
plot_attractor_path(intrinsic, title = "no_feedback", startStates = start_state_in,
second_round_states = middle_start_state_in, genes = genes_to_plot, colors = cols)
genes_to_plot = c("stimulus","BCL2", "IAP","Casp9", "Apoptosis") # optional
cols=c("green", "orange", "blue", "red", "darkred") #optional
source("plot_attractor_path.R")
plot_attractor_path(intrinsic, title = "no_feedback", startStates = start_state_in,
second_round_states = middle_start_state_in, genes = genes_to_plot, colors = cols)
par(mfrow=c(1,2))
source("plot_attractor_path.R")
plot_attractor_path(intrinsic, title = "no_feedback", startStates = start_state_in,
second_round_states = middle_start_state_in, genes = genes_to_plot, colors = cols)
plot_attractor_path(intrinsic_feedback, title = "Casp3->Casp9 feedback", startStates = start_state_in,
second_round_states = middle_start_state_in, genes = genes_to_plot, colors = cols )
plot_attractor_path(intrinsic, title = "no_feedback", startStates = start_state_in,
second_round_states = middle_start_state_in, genes = genes_to_plot, colors = cols)
plot_attractor_path(intrinsic_feedback, title = "Casp3->Casp9 feedback", startStates = start_state_in,
second_round_states = middle_start_state_in, genes = genes_to_plot, colors = cols )
plot_attractor_path(intrinsic, title = "no_feedback", startStates = start_state_in,
second_round_states = middle_start_state_in, genes = genes_to_plot, colors = cols)
source("plot_attractor_path.R")
plot_attractor_path(intrinsic, title = "no_feedback", startStates = start_state_in,
second_round_states = middle_start_state_in, genes = genes_to_plot, colors = cols)
source("plot_attractor_path.R")
plot_attractor_path(intrinsic, title = "no_feedback", startStates = start_state_in,
second_round_states = middle_start_state_in, genes = genes_to_plot, colors = cols)
source("plot_attractor_path.R")
plot_attractor_path(intrinsic, title = "no_feedback", startStates = start_state_in,
second_round_states = middle_start_state_in, genes = genes_to_plot, colors = cols)
source("plot_attractor_path.R")
plot_attractor_path(intrinsic, title = "no_feedback", startStates = start_state_in,
second_round_states = middle_start_state_in, genes = genes_to_plot, colors = cols)
source("plot_attractor_path.R")
plot_attractor_path(intrinsic, title = "no_feedback", startStates = start_state_in,
second_round_states = middle_start_state_in, genes = genes_to_plot, colors = cols)
source("plot_attractor_path.R")
plot_attractor_path(intrinsic, title = "no_feedback", startStates = start_state_in,
second_round_states = middle_start_state_in, genes = genes_to_plot, colors = cols)
source("plot_attractor_path.R")
plot_attractor_path(intrinsic, title = "no_feedback", startStates = start_state_in,
second_round_states = middle_start_state_in, genes = genes_to_plot, colors = cols)
source("plot_attractor_path.R")
plot_attractor_path(intrinsic, title = "no_feedback", startStates = start_state_in,
second_round_states = middle_start_state_in, genes = genes_to_plot, colors = cols, save_png = T)
source("plot_attractor_path.R")
plot_attractor_path(intrinsic, title = "no_feedback", startStates = start_state_in,
second_round_states = middle_start_state_in, genes = genes_to_plot, colors = cols, save_png = F)
par(xpd=T, mar=c(5.1, 4.1, 4.1, 60))
source("plot_attractor_path.R")
plot_attractor_path(intrinsic, title = "no_feedback", startStates = start_state_in,
second_round_states = middle_start_state_in, genes = genes_to_plot, colors = cols, save_png = F)
source("plot_attractor_path.R")
plot_attractor_path(intrinsic, title = "no_feedback", startStates = start_state_in,
second_round_states = middle_start_state_in, genes = genes_to_plot, colors = cols, save_png = F)
source("plot_attractor_path.R")
plot_attractor_path(intrinsic, title = "no_feedback", startStates = start_state_in,
second_round_states = middle_start_state_in, genes = genes_to_plot, colors = cols, save_png = F)
source("plot_attractor_path.R")
plot_attractor_path(intrinsic, title = "no_feedback", startStates = start_state_in,
second_round_states = middle_start_state_in, genes = genes_to_plot, colors = cols, save_png = F)
source("plot_attractor_path.R")
plot_attractor_path(intrinsic, title = "no_feedback", startStates = start_state_in,
second_round_states = middle_start_state_in, genes = genes_to_plot, colors = cols, save_png = F)
source("plot_attractor_path.R")
plot_attractor_path(intrinsic, title = "no_feedback", startStates = start_state_in,
second_round_states = middle_start_state_in, genes = genes_to_plot, colors = cols, save_png = F)
source("plot_attractor_path.R")
plot_attractor_path(intrinsic, title = "no_feedback", startStates = start_state_in,
second_round_states = middle_start_state_in, genes = genes_to_plot, colors = cols, save_png = F)
source("plot_attractor_path.R")
plot_attractor_path(intrinsic, title = "no_feedback", startStates = start_state_in,
second_round_states = middle_start_state_in, genes = genes_to_plot, colors = cols, save_png = F)
source("plot_attractor_path.R")
plot_attractor_path(intrinsic, title = "no_feedback", startStates = start_state_in,
second_round_states = middle_start_state_in, genes = genes_to_plot, colors = cols, save_png = F)
source("plot_attractor_path.R")
plot_attractor_path(intrinsic, title = "no_feedback", startStates = start_state_in,
second_round_states = middle_start_state_in, genes = genes_to_plot, colors = cols, save_png = F)
source("plot_attractor_path.R")
plot_attractor_path(intrinsic, title = "no_feedback", startStates = start_state_in,
second_round_states = middle_start_state_in, genes = genes_to_plot, colors = cols, save_png = F)
source("plot_attractor_path.R")
plot_attractor_path(intrinsic, title = "no_feedback", startStates = start_state_in,
second_round_states = middle_start_state_in, genes = genes_to_plot, colors = cols, save_png = T)
source("plot_attractor_path.R")
plot_attractor_path(intrinsic, title = "no_feedback", startStates = start_state_in,
second_round_states = middle_start_state_in, genes = genes_to_plot, colors = cols, save_png = T)
plot_attractor_path(intrinsic_feedback, title = "Casp3->Casp9 feedback", startStates = start_state_in,
second_round_states = middle_start_state_in, genes = genes_to_plot, colors = cols, save_png = T )
plot_attractor_path(intrinsic_feedback, title = "Casp3->Casp9 feedback", startStates = start_state_in,
second_round_states = middle_start_state_in, genes = genes_to_plot, colors = cols, draw_legend = F, save_png = T )
source("plot_attractor_path.R")
plot_attractor_path(intrinsic_feedback, title = "Casp3->Casp9 feedback", startStates = start_state_in,
second_round_states = middle_start_state_in, genes = genes_to_plot, colors = cols, draw_legend = F, save_png = T )
genes_to_plot = c("stimulus", "IAP","Casp9", "Apoptosis") # optional
cols=c("green", "orange", "blue", "red") #optional
source("plot_attractor_path.R")
plot_attractor_path(intrinsic, title = "no_feedback", startStates = start_state_in,
second_round_states = middle_start_state_in, genes = genes_to_plot, colors = cols, save_png = T)
plot_attractor_path(intrinsic_feedback, title = "Casp3->Casp9 feedback", startStates = start_state_in,
second_round_states = middle_start_state_in, genes = genes_to_plot, colors = cols, draw_legend = F, save_png = T )
source("plot_attractor_path.R")
plot_attractor_path(intrinsic, title = "no_feedback", startStates = start_state_in,
second_round_states = middle_start_state_in, genes = genes_to_plot, colors = cols, save_png = T)
source("plot_attractor_path.R")
plot_attractor_path(intrinsic, title = "no_feedback", startStates = start_state_in,
second_round_states = middle_start_state_in, genes = genes_to_plot, colors = cols, save_png = T)
source("plot_attractor_path.R")
plot_attractor_path(intrinsic, title = "no_feedback", startStates = start_state_in,
second_round_states = middle_start_state_in, genes = genes_to_plot, colors = cols, save_png = T)
source("plot_attractor_path.R")
plot_attractor_path(intrinsic, title = "no_feedback", startStates = start_state_in,
second_round_states = middle_start_state_in, genes = genes_to_plot, colors = cols, save_png = T)
source("plot_attractor_path.R")
plot_attractor_path(intrinsic, title = "no_feedback", startStates = start_state_in,
second_round_states = middle_start_state_in, genes = genes_to_plot, colors = cols, save_png = T)
source("plot_attractor_path.R")
plot_attractor_path(intrinsic, title = "no_feedback", startStates = start_state_in,
second_round_states = middle_start_state_in, genes = genes_to_plot, colors = cols, save_png = T)
source("plot_attractor_path.R")
plot_attractor_path(intrinsic, title = "no_feedback", startStates = start_state_in,
second_round_states = middle_start_state_in, genes = genes_to_plot, colors = cols, save_png = T)
source("plot_attractor_path.R")
plot_attractor_path(intrinsic, title = "no_feedback", startStates = start_state_in,
second_round_states = middle_start_state_in, genes = genes_to_plot, colors = cols, save_png = T)
source("plot_attractor_path.R")
plot_attractor_path(intrinsic, title = "no_feedback", startStates = start_state_in,
second_round_states = middle_start_state_in, genes = genes_to_plot, colors = cols, save_png = T)
extrinsic <- loadNetwork("extrinsic.boolnet")
intrinsic <- loadNetwork("intrinsic.boolnet")
intrinsic_feedback <- loadNetwork("intrinsic_feedback.boolnet")
library(BoolNet)
setwd("~/System_Biology/Final/models/")
start_state_in = c(1,0,1,0,0,0,0,0,0,1,0,0)
middle_start_state_in = c(0,1,0,1,1,1,1,1,1,0,1,1)
genes_to_plot = c("stimulus", "IAP","Casp9", "Apoptosis") # optional
cols=c("green", "orange", "blue", "red") #optional
source("plot_attractor_path.R")
plot_attractor_path(intrinsic, title = "no_feedback", startStates = start_state_in,
second_round_states = middle_start_state_in, genes = genes_to_plot, colors = cols, save_png = T, draw_legend = F)
plot_attractor_path(intrinsic_feedback, title = "Casp3->Casp9 feedback", startStates = start_state_in,
second_round_states = middle_start_state_in, genes = genes_to_plot, colors = cols, draw_legend = F, save_png = T )
start_state_in = c(1,0,1,0,0,0,0,0,0,1,0,0)
n_runs_matrix_1 <- average_n_attractor_paths(network = intrinsic_feedback, number_of_runs = 1,
start_state = start_state_in)
get_asynchronous_next_step <- function(network, start_state){
# eventuell auch alle gleichen zwischenschritte übergeben und auch in die matrix packen
# dann sieht man wie lange ein signal brauch um durch zu kommen
previous_state = start_state   # initialised with start state
names(previous_state) = network$genes
next_state <- stateTransition(network = network, state = previous_state, type = "asynchronous")
j = 0
while ((identical(previous_state, next_state)) && (j < length(network$genes)*500 ) ){
previous_state <- next_state
next_state <- stateTransition(network = network, state = previous_state, type = "asynchronous")
# print(c("step", j))
j= j+1
}
return(next_state)
}
get_asynchronous_attractor <- function(network, start_state){
previous_step <- start_state
names(previous_step) = network$genes
next_step <- get_asynchronous_next_step(network, previous_step)
steps_matrix <- matrix(start_state, ncol=1)
steps_matrix <- cbind(steps_matrix, next_step)
i = 0
while(!identical(previous_step, next_step)){
# print(c("att",i))
previous_step <- next_step
next_step <- get_asynchronous_next_step(network, previous_step)
steps_matrix <- cbind(steps_matrix, next_step)
i = i +1
}
next_step <- get_asynchronous_next_step(network, previous_step) # one last time in order to show we hit a steady state attractor
steps_matrix <- cbind(steps_matrix, next_step)
colum_header <- sprintf("t%s", seq(1,length(steps_matrix[1,])))
colnames(steps_matrix, colum_header)
return(steps_matrix)
}
ensure_dimensions <- function(m1,m2){
cols_m1 = length(m1[1,])
cols_m2 = length(m2[1,])
rows_m1 = length(m1[,1])
rows_m2 = length(m2[,1])
if ( cols_m1 <  cols_m2){
difference <- cols_m2 - cols_m1
for (i in (seq(1, difference))){
# add columns only consisting of zeros
m1 <- cbind(m1, numeric(rows_m1))
cols_m1 = length(m1[1,])
print("Fixed matrix dimensions. Added column.")
}
}
if ( rows_m1 <  rows_m2){
difference <- rows_m2 - rows_m1
for (i in (seq(1, difference))){
m1 <- rbind(m1, numeric(cols_m1))
rows_m2 = length(m2[,1])
print("Fixed matrix dimensions. Added row")
}
}
return(m1)
}
average_n_attractor_paths <- function(network, number_of_runs, start_state){
previous_state = start_state
names(start_state) = network$genes
sum_holder <- get_asynchronous_attractor(network, start_state)
if (number_of_runs > 1){
for (n in seq(2,number_of_runs)){
next_matrix <- get_asynchronous_attractor(network, start_state)
sum_holder <- ensure_dimensions(sum_holder, next_matrix)
sum_holder <- sum_holder + next_matrix
}
}
return((sum_holder)/number_of_runs)
}
n_runs_matrix_1 <- average_n_attractor_paths(network = intrinsic_feedback, number_of_runs = 1,
start_state = start_state_in)
write.csv(n_runs_matrix, "1_run_intrinsic_feedback.csv")
write.csv(n_runs_matrix_1, "1_run_intrinsic_feedback.csv")
n_runs_matrix_2 <- average_n_attractor_paths(network = intrinsic_feedback, number_of_runs = 1,
start_state = start_state_in)
write.csv(n_runs_matrix_1, "1_run_intrinsic_feedback_2.csv")
